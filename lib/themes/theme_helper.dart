import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:restaurant_app/core/utils/size_utils.dart';
import '../core/utils/pref_utils.dart';

/// Helper class for managing themes and colors.
class    ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    PrefUtils().setThemeData(newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.green50,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 4,
        space: 4,
        color: appTheme.orange80001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodyLarge: TextStyle(
      color: appTheme.whiteA700,
      fontSize: 16.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: TextStyle(
      color: appTheme.gray50001,
      fontSize: 14.fSize,
      fontFamily: 'Roboto',
      fontWeight: FontWeight.w400,
    ),
    bodySmall: TextStyle(
      color: appTheme.gray800,
      fontSize: 12.fSize,
      fontFamily: 'Lato',
      fontWeight: FontWeight.w400,
    ),
    displayMedium: TextStyle(
      color: appTheme.black900,
      fontSize: 40.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w500,
    ),
    headlineMedium: TextStyle(
      color: appTheme.whiteA700,
      fontSize: 28.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w600,
    ),
    labelLarge: TextStyle(
      color: appTheme.gray800,
      fontSize: 12.fSize,
      fontFamily: 'Lato',
      fontWeight: FontWeight.w700,
    ),
    titleLarge: TextStyle(
      color: appTheme.gray800,
      fontSize: 20.fSize,
      fontFamily: 'Lato',
      fontWeight: FontWeight.w400,
    ),
    titleMedium: TextStyle(
      color: appTheme.black900,
      fontSize: 16.fSize,
      fontFamily: 'Lato',
      fontWeight: FontWeight.w700,
    ),
    titleSmall: TextStyle(
      color: appTheme.pink50001,
      fontSize: 15.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w500,
    ),
  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light();
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);

  // Blue
  Color get blue300 => const Color(0XFF5EA1D5);
  Color get deepBlue => const Color(0xFF00008B);
  Color get blue50 => const Color(0XFFECF6FF);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD3D3D3);

  // BlueGrayAb
  Color get blueGray100Ab => const Color(0XABCBCBD4);

  // DeepOrange
  Color get deepOrangeA100 => const Color(0XFFFAA881);

  // DeepPurple
  Color get deepPurple100 => const Color(0XFFD6B6FA);

  // Gray
  Color get gray400 => const Color(0XFFC8B6B6);
  Color get gray50 => const Color(0XFFF8F7FA);
  Color get gray500 => const Color(0XFFA6A6AA);
  Color get gray50001 => const Color(0XFF959595);
  Color get gray5001 => const Color(0XFFFAF9FF);
  Color get gray600 => const Color(0XFF686B6F);
  Color get gray800 => const Color(0XFF3A3A3A);
  Color get gray900 => const Color(0XFF1A1A1A);

  // Green
  Color get green50 => const Color(0XFFEAF8EC);
  Color get green500 => const Color(0XFF51B960);

  // Orange
  Color get orange800 => const Color(0XFFF56606);
  Color get orange80001 => const Color(0XFFF56605);

  // Pink
  Color get pink500 => const Color(0XFFF60C8B);
  Color get pink50001 => const Color(0XFFF6158D);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);

  // Yellow
  Color get yellowA400 => const Color(0XFFFFE202);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
